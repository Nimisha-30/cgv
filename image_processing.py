# -*- coding: utf-8 -*-
"""Image Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zd50fB-n2O1XiimV6Obc7BCYBTEdUIM_

# Loading and Displaying an image

## Using OpenCV
"""

import cv2
from google.colab.patches import cv2_imshow
img1=cv2.imread('/content/cat.jpg')
cv2_imshow(img1)

"""## Using Pillow"""

from PIL import Image
img2=Image.open('/content/cat.jpg')
img2.show()

"""## Using Matplotlib"""

from matplotlib import pyplot as plt
import matplotlib.image as img
img3=img.imread('/content/cat.jpg')
plt.imshow(img3)

"""## Using Scikit"""

from skimage import io
img4=io.imread('/content/cat.jpg')
io.imshow(img4)
io.show()

"""# Histogram of an image"""

import numpy as np
from matplotlib import pyplot as plt
import cv2

img=cv2.imread('/content/cat.jpg')

# plot histogram
# split image into blue, green and red channels
channels=cv2.split(img)
colors=("b", "g", "r")
# plt.title(title)
plt.xlabel("bins")
plt.ylabel("no of pixels")
# loop over image channels
for channel, color in zip(channels, colors):
  # compute histogram for current channel and print it
  hist=cv2.calcHist([channel], [0], None, [256], [0, 256])
  plt.plot(hist, color=color)
  plt.xlim([0, 256])

gsimg=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2_imshow(gsimg)

gshist=cv2.calcHist(gsimg, [0], None, [256], [0, 256])
plt.hist(gsimg.ravel(), 256, [0, 256])
plt.show()

"""# Filtering"""

kernel=np.array([[0,0,0],[0,1,0],[0,0,0]])
identity=cv2.filter2D(src=img, ddepth=-1, kernel=kernel)
plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.imshow(img)
plt.title('Original')
plt.subplot(122)
plt.imshow(identity)
plt.title('Identity')

"""## Blur using kernels"""

kernel=np.ones((3,3),np.float32)/9
blurimg=cv2.filter2D(src=img,ddepth=-1,kernel=kernel)
plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.imshow(blurimg)
plt.title('Original')
plt.subplot(122)
plt.imshow(identity)
plt.title('Identity')

"""### Mean Blur"""

mbimg=cv2.blur(img,(5,5))
plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.imshow(mbimg)
plt.title('Original')
plt.subplot(122)
plt.imshow(identity)
plt.title('Identity')

"""### Median Blur"""

mdbimg=cv2.medianBlur(src=img,ksize=5)
plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.imshow(mdbimg)
plt.title('Original')
plt.subplot(122)
plt.imshow(identity)
plt.title('Identity')

"""### Gaussian Blur"""

gbimg=cv2.GaussianBlur(src=img,ksize=(5,5),sigmaX=0)
plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.imshow(gbimg)
plt.title('Original')
plt.subplot(122)
plt.imshow(identity)
plt.title('Identity')

"""## Sharpen using kernels"""

kernel=np.array([[0,-1,0],[-1,5,-1],[0,-1,0]])
shimg=cv2.filter2D(src=img, ddepth=-1, kernel=kernel)
plt.figure(figsize=(15, 15))
plt.subplot(121)
plt.imshow(shimg)
plt.title('Original')
plt.subplot(122)
plt.imshow(identity)
plt.title('Identity')

"""# Edge Detection in images"""

gsgbimg=cv2.GaussianBlur(gsimg,(3,3),0)
cv2_imshow(gsgbimg)

"""## Using Sobel"""

# Sobel Edge Detection on the X axis
sobelx=cv2.Sobel(src=gsgbimg,ddepth=cv2.CV_64F,dx=1,dy=0,ksize=3) 
# Sobel Edge Detection on the Y axis
sobely=cv2.Sobel(src=gsgbimg,ddepth=cv2.CV_64F,dx=0,dy=1,ksize=3) 
# Combined X and Y Sobel Edge Detection
sobelxy=cv2.Sobel(src=gsgbimg,ddepth=cv2.CV_64F,dx=1,dy=1,ksize=3)
cv2_imshow(sobelx)
cv2_imshow(sobely)
cv2_imshow(sobelxy)

"""## Using Canny"""

canny=cv2.Canny(image=gsgbimg,threshold1=100,threshold2=200)
cv2_imshow(canny)

"""## Using Laplacian"""

laplacian=cv2.Laplacian(gsgbimg,cv2.CV_16S,ksize=3)
cv2_imshow(laplacian)

"""## Using Prewitt"""

prewittx=np.array([[1,1,1],[0,0,0],[-1,-1,-1]])
prewitty=np.array([[-1,0,1],[-1,0,1],[-1,0,1]])
prewittximg=cv2.filter2D(gsgbimg, -1, prewittx)
prewittyimg=cv2.filter2D(gsgbimg, -1, prewitty)
cv2_imshow(prewittximg)
cv2_imshow(prewittyimg)
cv2_imshow(prewittximg + prewittyimg)

"""# Frequency Domain Operations

## Fast Fourier Transform
"""

f=np.fft.fft2(gsimg)
fshift=np.fft.fftshift(f)
magnitudeSpectrum=20*np.log(np.abs(fshift))
plt.subplot(121),plt.imshow(gsimg, cmap = 'gray')
plt.title('Input Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(magnitudeSpectrum, cmap = 'gray')
plt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])
plt.show()